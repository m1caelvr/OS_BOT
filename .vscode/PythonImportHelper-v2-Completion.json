[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {}
    },
    {
        "label": "pydirectinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydirectinput",
        "description": "pydirectinput",
        "detail": "pydirectinput",
        "documentation": {}
    },
    {
        "label": "SharedState",
        "importPath": "src.shared.shared_state",
        "description": "src.shared.shared_state",
        "isExtraImport": true,
        "detail": "src.shared.shared_state",
        "documentation": {}
    },
    {
        "label": "SharedState",
        "importPath": "src.shared.shared_state",
        "description": "src.shared.shared_state",
        "isExtraImport": true,
        "detail": "src.shared.shared_state",
        "documentation": {}
    },
    {
        "label": "SharedState",
        "importPath": "src.shared.shared_state",
        "description": "src.shared.shared_state",
        "isExtraImport": true,
        "detail": "src.shared.shared_state",
        "documentation": {}
    },
    {
        "label": "CONSTANTS",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "SOURCE_FILE",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "COORDINATES_NOTEBOOK_ANTONIO",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "CONSTANTS",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "SOURCE_FILE",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "SOURCE_FILE",
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "isExtraImport": true,
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "insert_os",
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "isExtraImport": true,
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "add_doc",
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "isExtraImport": true,
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "fill_data",
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "isExtraImport": true,
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "end_service",
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "isExtraImport": true,
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "finalize_line",
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "isExtraImport": true,
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "isExtraImport": true,
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "isExtraImport": true,
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "save_config",
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "isExtraImport": true,
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "tracemalloc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "flet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flet",
        "description": "flet",
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "get_monitors",
        "importPath": "screeninfo",
        "description": "screeninfo",
        "isExtraImport": true,
        "detail": "screeninfo",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "start_bot",
        "importPath": "src.bot.bot_runner",
        "description": "src.bot.bot_runner",
        "isExtraImport": true,
        "detail": "src.bot.bot_runner",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "isExtraImport": true,
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "past_text",
        "kind": 2,
        "importPath": "src.bot.automation",
        "description": "src.bot.automation",
        "peekOfCode": "def past_text(text):\n    if SharedState.stop_execution:\n        logging.info(\"Execução interrompida. Cancelando safe_click.\")\n        return\n    pyperclip.copy(text)\n    pdi.hotkey(\"ctrl\", \"v\")\nasync def insert_os(cell_value):\n    if SharedState.stop_execution:\n        logging.info(\"Execução interrompida. Cancelando safe_click.\")\n        return",
        "detail": "src.bot.automation",
        "documentation": {}
    },
    {
        "label": "CONSTANTS",
        "kind": 6,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "class CONSTANTS:\n    FILE_IN_PRISMA_NAME = \"RELATÓRIO\"\n    HN = \"HN\"\n    config = load_config()\n    INITIAL_DATE = config.get(\"INITIAL_DATE\")\n    FINAL_DATE = config.get(\"FINAL_DATE\")\nclass COORDINATES_NOTEBOOK_APRENDIZ:\n    CLICK_TO_INSERT_OS = [452, 278]\n    CLICK_OUTSIDE_THE_INPUT = [316, 330]\n    CLICK_TO_ADD_DOC = [1755, 216]",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "COORDINATES_NOTEBOOK_APRENDIZ",
        "kind": 6,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "class COORDINATES_NOTEBOOK_APRENDIZ:\n    CLICK_TO_INSERT_OS = [452, 278]\n    CLICK_OUTSIDE_THE_INPUT = [316, 330]\n    CLICK_TO_ADD_DOC = [1755, 216]\n    CLICK_TO_ADD_FILE = [1677, 155]\n    INSERT_NAME_FILE = [1647, 503]\n    CLICK_INPUT = [1723, 289]\n    CLICK_IN_FILE = [480, 178]\n    CLICK_IN_OK = [1718, 644]\n    CLICK_PROCEDURE_OS = [917, 176]",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "COORDINATES_NOTEBOOK_ANTONIO",
        "kind": 6,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "class COORDINATES_NOTEBOOK_ANTONIO:\n    CLICK_TO_INSERT_OS = [273, 224]\n    CLICK_OUTSIDE_THE_INPUT = [214, 268]\n    CLICK_TO_ADD_DOC = [1220, 171]\n    CLICK_TO_ADD_FILE = [1096, 128]\n    INSERT_NAME_FILE = [1144, 402]\n    CLICK_INPUT = [1200, 232]\n    CLICK_IN_FILE = [686, 251]\n    CLICK_IN_OK = [1200, 515]\n    CLICK_PROCEDURE_OS = [699, 145]",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "find_excel_file",
        "kind": 2,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "def find_excel_file(directory):\n    for file in os.listdir(directory):\n        if file.endswith((\".xlsx\", \".xls\")):\n            return os.path.join(directory, file)\n    raise FileNotFoundError(\n        \"Nenhuma planilha foi encontrada no diretório especificado.\"\n    )\nSOURCE_FILE = find_excel_file(PLANILHA_DIR)\nlogging.info(f\"Planilha encontrada: {SOURCE_FILE}\")\n# 26/11/2024 08:00",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "PLANILHA_DIR",
        "kind": 5,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "PLANILHA_DIR = \"./data/PLANILHA_OS\"\ndef find_excel_file(directory):\n    for file in os.listdir(directory):\n        if file.endswith((\".xlsx\", \".xls\")):\n            return os.path.join(directory, file)\n    raise FileNotFoundError(\n        \"Nenhuma planilha foi encontrada no diretório especificado.\"\n    )\nSOURCE_FILE = find_excel_file(PLANILHA_DIR)\nlogging.info(f\"Planilha encontrada: {SOURCE_FILE}\")",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "SOURCE_FILE",
        "kind": 5,
        "importPath": "src.bot.constants",
        "description": "src.bot.constants",
        "peekOfCode": "SOURCE_FILE = find_excel_file(PLANILHA_DIR)\nlogging.info(f\"Planilha encontrada: {SOURCE_FILE}\")\n# 26/11/2024 08:00\n# 26/11/2024 09:00\nclass CONSTANTS:\n    FILE_IN_PRISMA_NAME = \"RELATÓRIO\"\n    HN = \"HN\"\n    config = load_config()\n    INITIAL_DATE = config.get(\"INITIAL_DATE\")\n    FINAL_DATE = config.get(\"FINAL_DATE\")",
        "detail": "src.bot.constants",
        "documentation": {}
    },
    {
        "label": "ScriptController",
        "kind": 6,
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "peekOfCode": "class ScriptController:\n    def __init__(self, page):\n        self.page = page\n        self.script_task = None\n        self.start_button = None\n        self.stop_button = None\n        self.is_running = False\n        self.os_count_label = None\n        self.os_count_restant = None\n        self.df = pd.read_excel(SOURCE_FILE)",
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "validate_datetime",
        "kind": 2,
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "peekOfCode": "def validate_datetime(value):\n    try:\n        datetime.strptime(value, \"%d/%m/%Y %H:%M\")\n        return True\n    except ValueError:\n        return False\ndef main(page: ft.Page):\n    window_width = 400\n    window_height = 320\n    page.window.width = window_width",
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "peekOfCode": "def main(page: ft.Page):\n    window_width = 400\n    window_height = 320\n    page.window.width = window_width\n    page.window.height = window_height\n    monitor = get_monitors()[0]\n    screen_width = monitor.width\n    screen_height = monitor.height\n    page.window.left = window_width / 3\n    page.window.top = screen_height - (window_height + 30)",
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "peekOfCode": "log_dir = \"logs\"\nif not os.path.exists(log_dir):\n    os.makedirs(log_dir)\nlog_file = os.path.join(log_dir, \"automacao.log\")\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[logging.FileHandler(log_file), logging.StreamHandler()],\n)\ntracemalloc.start()",
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "log_file",
        "kind": 5,
        "importPath": "src.gui.flet_ui",
        "description": "src.gui.flet_ui",
        "peekOfCode": "log_file = os.path.join(log_dir, \"automacao.log\")\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[logging.FileHandler(log_file), logging.StreamHandler()],\n)\ntracemalloc.start()\nclass ScriptController:\n    def __init__(self, page):\n        self.page = page",
        "detail": "src.gui.flet_ui",
        "documentation": {}
    },
    {
        "label": "get_default_config",
        "kind": 2,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "def get_default_config():\n    now = datetime.now()\n    return {\n        \"INITIAL_DATE\": (now - timedelta(hours=1)).strftime(\"%d/%m/%Y %H:%M\"),\n        \"FINAL_DATE\": now.strftime(\"%d/%m/%Y %H:%M\"),\n    }\ndef load_config():\n    config_dir = os.path.dirname(CONFIG_FILE)\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "def load_config():\n    config_dir = os.path.dirname(CONFIG_FILE)\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n    if not os.path.exists(CONFIG_FILE):\n        default_config = get_default_config()\n        save_config(default_config)\n        return default_config\n    with open(CONFIG_FILE, \"r\") as file:\n        return json.load(file)",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "save_config",
        "kind": 2,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "def save_config(config, CONSTANTS):\n    with open(CONFIG_FILE, \"w\") as file:\n        json.dump(config, file, indent=4)\n    CONSTANTS.INITIAL_DATE = config[\"INITIAL_DATE\"]\n    CONSTANTS.FINAL_DATE = config[\"FINAL_DATE\"]\ndef get_config_value(key):\n    config = load_config()\n    return config.get(key, None)\ndef set_config_value(key, value):\n    config = load_config()",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "get_config_value",
        "kind": 2,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "def get_config_value(key):\n    config = load_config()\n    return config.get(key, None)\ndef set_config_value(key, value):\n    config = load_config()\n    config[key] = value\n    save_config(config)",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "set_config_value",
        "kind": 2,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "def set_config_value(key, value):\n    config = load_config()\n    config[key] = value\n    save_config(config)",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "CONFIG_FILE",
        "kind": 5,
        "importPath": "src.shared.config_manager",
        "description": "src.shared.config_manager",
        "peekOfCode": "CONFIG_FILE = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), \"..\", \"..\", \"data\", \"config.json\"\n)\ndef get_default_config():\n    now = datetime.now()\n    return {\n        \"INITIAL_DATE\": (now - timedelta(hours=1)).strftime(\"%d/%m/%Y %H:%M\"),\n        \"FINAL_DATE\": now.strftime(\"%d/%m/%Y %H:%M\"),\n    }\ndef load_config():",
        "detail": "src.shared.config_manager",
        "documentation": {}
    },
    {
        "label": "SharedState",
        "kind": 6,
        "importPath": "src.shared.shared_state",
        "description": "src.shared.shared_state",
        "peekOfCode": "class SharedState:\n    stop_execution = False\n    made_consecutively = 0\n    os_restants = 0",
        "detail": "src.shared.shared_state",
        "documentation": {}
    },
    {
        "label": "load_excel_file",
        "kind": 2,
        "importPath": "src.shared.utils",
        "description": "src.shared.utils",
        "peekOfCode": "def load_excel_file(file_path):\n    try:\n        return pd.read_excel(file_path)\n    except FileNotFoundError:\n        raise Exception(f\"Arquivo não encontrado: {file_path}\")",
        "detail": "src.shared.utils",
        "documentation": {}
    },
    {
        "label": "sheet",
        "kind": 5,
        "importPath": "tests",
        "description": "tests",
        "peekOfCode": "sheet = pd.read_excel(SOURCE_FILE)\n# line = 108\n# valor1 = sheet.at[line - 2, \"N_OS\"]\n# valor2 = sheet.at[line - 2, \"Status\"]\n# print(f\"Valor: {valor1} em {valor2}\")\nsheet.loc[:70, \"Status\"] = \"Finalizada\"\nsheet.to_excel(SOURCE_FILE, index=False)\nprint(\"Planilha atualizada com sucesso.\")\n# page.window.always_on_top = True\n# file = \"PREVENTIVAS.xlsx\"",
        "detail": "tests",
        "documentation": {}
    }
]